---
import { getCollection, getEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  CalendarDays,
  Clock,
  Users,
  GraduationCap,
  MapPin,
  Languages,
  CheckCircle2,
} from 'lucide-react';
import { render } from 'astro:content';

export async function getStaticPaths() {
  const trainings = await getCollection('training');

  return Promise.all(
    trainings.map(async (training) => {
      // Resolve trainer references
      const resolvedTrainers = await Promise.all(
        training.data.trainers.map(async (trainer) => {
          try {
            // Check if trainer is a reference object (which it appears to be)
            if (trainer && typeof trainer === 'object' && 'id' in trainer) {
              return await getEntry('team', trainer.id);
            }
            // Fallback for string IDs if they exist
            if (typeof trainer === 'string') {
              return await getEntry('team', trainer);
            }
            return null;
          } catch (error) {
            console.error(`Error resolving trainer:`, error);
            return null;
          }
        })
      );

      const validTrainers = resolvedTrainers.filter((trainer) => trainer !== null);

      return {
        params: { id: training.id },
        props: {
          training: {
            ...training,
            data: {
              ...training.data,
              trainers: validTrainers,
            },
          },
        },
      };
    })
  );
}

const { training } = Astro.props;
const { Content } = await render(training);

const {
  title,
  description,
  publishDate,
  duration,
  level,
  maxParticipants,
  language,
  location,
  price,
  learningObjectives,
  modules,
  trainers,
  prerequisites,
  includes,
  testimonials,
  coverImage,
  gallery,
  tags,
  upcomingDates,
} = training.data;

const formattedDate = new Date(publishDate).toLocaleDateString('nl-NL', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const levelColors = {
  beginner: 'bg-success/20 text-success',
  intermediate: 'bg-warning/20 text-warning',
  advanced: 'bg-destructive/20 text-destructive',
};
---

<BaseLayout title={title}>
  <div class="space-y-8">
    {/* Hero Section */}
    <div class="relative">
      {
        coverImage && (
          <div class="w-full h-96 overflow-hidden">
            <img
              src={coverImage}
              alt={`Cover image for ${title}`}
              class="w-full h-full object-cover"
            />
          </div>
        )
      }

      <div class="absolute inset-0 bg-gradient-to-t from-background/80 to-background/20"></div>

      <div class="absolute bottom-0 left-0 right-0 p-8">
        <div class="container mx-auto">
          <div class="max-w-3xl">
            <div class="space-y-4">
              <div class="flex flex-wrap gap-2">
                {
                  tags.map((tag) => (
                    <Badge className="bg-primary/20 text-primary hover:bg-primary/30">{tag}</Badge>
                  ))
                }
              </div>
              <h1 class="text-4xl font-bold text-white">{title}</h1>
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Main Content */}
    <div class="container mx-auto px-4">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Content Column */}
        <div class="lg:col-span-2 space-y-8">
          {/* Description Card */}
          <Card>
            <CardHeader>
              <CardTitle>Over deze training</CardTitle>
            </CardHeader>
            <CardContent class="prose prose-lg dark:prose-invert pt-6">
              <p>{description}</p>

              {/* Learning Objectives */}
              <div class="mt-8">
                <h3 class="text-xl font-semibold mb-4">Na deze training kun je:</h3>
                <ul class="space-y-2">
                  {
                    learningObjectives.map((objective) => (
                      <li class="flex items-start gap-2">
                        <CheckCircle2 className="w-5 h-5 text-primary mt-1 flex-shrink-0" />
                        <span>{objective}</span>
                      </li>
                    ))
                  }
                </ul>
              </div>
            </CardContent>
          </Card>

          {/* Modules */}
          <Card>
            <CardHeader>
              <CardTitle>Programma</CardTitle>
            </CardHeader>
            <CardContent class="space-y-6">
              {
                modules.map((module) => (
                  <div class="border-b last:border-0 pb-4 last:pb-0">
                    <h3 class="font-semibold text-lg mb-2">{module.title}</h3>
                    <p class="text-muted-foreground">{module.description}</p>
                    {module.duration && (
                      <div class="flex items-center gap-2 mt-2 text-sm text-muted-foreground">
                        <Clock className="w-4 h-4" />
                        <span>{module.duration}</span>
                      </div>
                    )}
                  </div>
                ))
              }
            </CardContent>
          </Card>

          {/* Training Content */}
          <Card>
            <CardContent>
              <div class="prose prose-lg max-w-none mb-16 text-foreground">
                <Content />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div class="space-y-6">
          {/* Training Info Card */}
          <Card>
            <CardHeader>
              <CardTitle>Info</CardTitle>
            </CardHeader>
            <CardContent class="p-6 space-y-4">
              <div class="flex items-center gap-2 text-sm">
                <Clock className="w-4 h-4" />
                <span>{duration}</span>
              </div>

              <div class="flex items-center gap-2 text-sm">
                <GraduationCap className="w-4 h-4" />
                <Badge className={levelColors[level]}>{level}</Badge>
              </div>

              {
                maxParticipants && (
                  <div class="flex items-center gap-2 text-sm">
                    <Users className="w-4 h-4" />
                    <span>Max {maxParticipants} deelnemers</span>
                  </div>
                )
              }

              <div class="flex items-center gap-2 text-sm">
                <MapPin className="w-4 h-4" />
                <span>{location}</span>
              </div>

              <div class="flex items-center gap-2 text-sm">
                <Languages className="w-4 h-4" />
                <span>{language === 'nl' ? 'Nederlands' : 'English'}</span>
              </div>

              {price && <div class="mt-4 text-xl font-bold">{price}</div>}
            </CardContent>
          </Card>

          {/* Trainers Card */}
          {
            trainers && trainers.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Trainers</CardTitle>
                </CardHeader>
                <CardContent class="space-y-4">
                  {trainers.map((trainer) => {
                    if (!trainer || !trainer.data) {
                      console.log('Invalid trainer data:', trainer);
                      return null;
                    }

                    const { name, role, profileImage } = trainer.data;

                    return (
                      <div class="flex items-center gap-4">
                        {profileImage ? (
                          <img
                            src={profileImage}
                            alt={`Profile photo of ${name}`}
                            class="w-12 h-12 rounded-full object-cover"
                          />
                        ) : (
                          <div class="w-12 h-12 rounded-full bg-muted flex items-center justify-center">
                            <span class="text-muted-foreground text-lg">
                              {name?.charAt(0) || '?'}
                            </span>
                          </div>
                        )}
                        <div>
                          <p class="font-semibold">{name || 'Unknown Trainer'}</p>
                          {role && <p class="text-sm text-muted-foreground">{role}</p>}
                        </div>
                      </div>
                    );
                  })}
                </CardContent>
              </Card>
            )
          }

          {/* What's Included */}
          {
            includes && includes.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>In het kort</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul class="space-y-2">
                    {includes.map((item) => (
                      <li class="flex items-center gap-2">
                        <CheckCircle2 className="w-4 h-4 text-primary" />
                        <span>{item}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            )
          }

          {/* Contact Card */}
          <Card>
            <CardHeader>
              <CardTitle>Interesse?</CardTitle>
            </CardHeader>
            <CardContent class="p-6">
              <p class="text-sm text-muted-foreground mb-4">
                Neem contact op voor meer informatie over deze training.
              </p>

              <a
                href="/contact"
                class="inline-flex items-center justify-center w-full px-4 py-2
              text-sm font-medium text-white bg-primary hover:bg-primary/90 rounded-md"
              >
                Contact opnemen
              </a>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>
