---
import { getCollection, getEntry, render } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import VideoEmbed from '@/components/VideoEmbed';
import Hero from '@/components/Hero.astro';
import Breadcrumb from '@/components/Breadcrumb';
import Article from '@/components/Article.astro';
import LessonWrapper from '@/components/LessonWrapper';
import LessonNavigation from '@/components/LessonNavigation';

export async function getStaticPaths() {
  const allLessons = await getCollection('lessons');

  return allLessons.map((lesson) => {
    const courseId = lesson.id.split('/lessons/')[0];
    const lessonSlug = lesson.id.split('/lessons/')[1];

    return {
      params: {
        courseid: courseId,
        lessonid: lessonSlug,
      },
      props: { lesson },
    };
  });
}

const { lesson } = Astro.props;

// Get the course data
const course = await getEntry('courses', Astro.params.courseid);
if (!course) {
  throw new Error(`No course found with id ${Astro.params.courseid}`);
}

const { Content } = await render(lesson);

// Get all lessons for this course for navigation
const allLessons = await getCollection('lessons', (entry) => {
  const courseId = entry.id.split('/lessons/')[0];
  return courseId === Astro.params.courseid && !entry.data.draft;
});

const sortedLessons = allLessons.sort((a, b) => a.data.order - b.data.order);
const currentIndex = sortedLessons.findIndex((l) => l.id === lesson.id);
const prevLesson = currentIndex > 0 ? sortedLessons[currentIndex - 1] : null;
const nextLesson = currentIndex < sortedLessons.length - 1 ? sortedLessons[currentIndex + 1] : null;

function getLessonSlug(lessonId) {
  return lessonId.split('/lessons/')[1];
}

const breadcrumbItems = [
  { label: 'Leren', href: '/learn' },
  { label: course.data.title, href: `/learn/courses/${Astro.params.courseid}` },
  { label: lesson.data.title },
];
const lessonIndex = sortedLessons.findIndex((l) => l.id === lesson.id);
---

<BaseLayout title={`${lesson.data.title} - ${course.data.title} - Legal Design Academy`}>
  <div class="mx-auto">
    <div class="mb-6">
      <Breadcrumb items={breadcrumbItems} />
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      {/* Main Content */}
      <div class="lg:col-span-2">
        <LessonWrapper
          client:load
          lesson={lesson}
          course={course}
          lessonIndex={lessonIndex}
          videoUrl={lesson.data.videoUrl}
        >
          <Article>
            <Content />
          </Article>
        </LessonWrapper>

        {/* Lesson Content */}
      </div>

      {/* Sidebar */}
      <div class="lg:col-span-1">
        <div class="sticky top-24">
          <div class="sticky top-24">
            {/* Navigation now appears at the top of sidebar */}
            <LessonNavigation
              client:load
              prevLesson={prevLesson}
              nextLesson={nextLesson}
              courseId={Astro.params.courseid}
            />
            <Card>
              <div class="p-4">
                <h2 class="text-l mb-4">Meer in deze serie</h2>
                <ScrollArea class="h-[calc(100vh-300px)]">
                  <div class="space-y-2 pr-4">
                    {
                      sortedLessons.map((l, index) => (
                        <a
                          href={`/learn/courses/${Astro.params.courseid}/lessons/${getLessonSlug(l.id)}`}
                          class={`block p-3 rounded-lg transition-colors ${
                            l.id === lesson.id
                              ? 'bg-primary text-primary-foreground'
                              : 'hover:bg-muted'
                          }`}
                        >
                          <div class="text-sm text-muted-foreground">Les {index + 1}</div>
                          <div class="font-medium">{l.data.title}</div>
                        </a>
                      ))
                    }
                  </div>
                </ScrollArea>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>
