---
import { getCollection } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import Hero from '@/components/Hero.astro';
import Breadcrumb from '@/components/Breadcrumb';
import NewsletterCard from '@/components/NewsletterCard.astro';
import ArticleCard from '@/components/ArticleCard.astro';

import { languages } from '@/i18n/config';
import { articleTranslations } from '@/i18n/translations/articles';
// src/components/ArticleCard.astro

// Generate pages for each language
export function getStaticPaths() {
  return Object.keys(languages).map((lang) => ({
    params: { lang },
  }));
}

const { lang } = Astro.params;
const t = articleTranslations[lang];

// Get all articles for the current language
const allArticles = await getCollection('articles');
const articles = allArticles.filter((article) => article.id.startsWith(`${lang}/`));

// Sort articles by date
const sortedArticles = [...articles].sort((a, b) => {
  try {
    return b.data.publishDate.getTime() - a.data.publishDate.getTime();
  } catch (error) {
    console.error('Date comparison error:', error);
    return 0;
  }
});

// Get all authors
const authors = await getCollection('team');
const authorsMap = new Map(authors.map((author) => [author.id, author]));

const breadcrumbItems = [
  { label: t.breadcrumb.learn },
  { label: t.breadcrumb.blog, href: `/${lang}/learn/articles` },
];
---

<BaseLayout title={t.title}>
  <Breadcrumb items={breadcrumbItems} client:load />

  <Hero variant="small" subtitle={t.subtitle} title={t.pageTitle} description={t.description} />

  <section class="py-12">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="articles-grid">
      {/* First 4 articles */}
      {
        sortedArticles
          .slice(0, 4)
          .map((article) => (
            <ArticleCard
              article={article}
              author={authorsMap.get(article.data.author)}
              lang={lang}
            />
          ))
      }

      {/* Newsletter Card - Positioned in middle of second row */}
      <NewsletterCard lang={lang} />

      {/* Remaining articles */}
      {
        sortedArticles
          .slice(4)
          .map((article) => (
            <ArticleCard
              article={article}
              author={authorsMap.get(article.data.author)}
              lang={lang}
            />
          ))
      }
    </div>

    {/* No Articles Found State */}
    {
      sortedArticles.length === 0 && (
        <div class="text-center py-12">
          <p class="text-muted-foreground">{t.noArticles}</p>
        </div>
      )
    }
  </section>
</BaseLayout>

<style>
  .article-card {
    transition: all 0.3s ease-out;
  }

  .article-card.hidden {
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
  }
</style>
