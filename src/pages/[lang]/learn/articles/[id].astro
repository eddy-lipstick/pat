---
import { getCollection } from 'astro:content';
import { render } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, ArrowRight } from 'lucide-react';
import Breadcrumb from '@/components/Breadcrumb';
import Hero from '@/components/Hero.astro';
import Article from '@/components/Article.astro';
import { languages } from '@/i18n/config';
import { articleTranslations } from '@/i18n/translations/articles';

interface Props {
  entry: CollectionEntry<'articles'>;
  relatedArticles: CollectionEntry<'articles'>[];
  authorData: CollectionEntry<'team'> | undefined;
}

export async function getStaticPaths() {
  try {
    const allArticles = await getCollection('articles');
    const teamMembers = await getCollection('team');

    if (!allArticles || allArticles.length === 0) {
      console.warn('No articles found in collection');
      return [];
    }

    return Object.keys(languages).flatMap((lang) => {
      // Filter articles for current language
      const languageArticles = allArticles.filter(article => 
        article.id.startsWith(`${lang}/`)
      );

      return languageArticles.map((entry) => {
        try {
          const authorData = teamMembers.find((member) => member.id === entry.data.author);

          // Get related articles from the same language
          const relatedArticles = languageArticles
            .filter((article) => {
              if (article.id === entry.id) return false;

              const currentTags = entry.data.tags?.map((tag) => tag.toLowerCase().trim()) || [];
              const articleTags = article.data.tags?.map((tag) => tag.toLowerCase().trim()) || [];

              return articleTags.some((tag) => currentTags.includes(tag));
            })
            .slice(0, 3);

          // Extract the article ID without the language prefix
          const articleId = entry.id.split('/').pop();

          return {
            params: { 
              lang,
              id: articleId 
            },
            props: {
              entry,
              relatedArticles,
              authorData,
            },
          };
        } catch (error) {
          console.error(`Error processing article ${entry.id}:`, error);
          return null;
        }
      });
    }).filter(Boolean);
  } catch (error) {
    console.error('Error loading articles collection:', error);
    return [];
  }
}

const { entry, relatedArticles, authorData } = Astro.props;
const { lang } = Astro.params;
const t = articleTranslations[lang];
const { Content } = await render(entry);

// Format the publish date using the current language
const formattedDate = entry.data.publishDate.toLocaleDateString(lang, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const breadcrumbItems = [
  { label: t.breadcrumb.learn, href: `/${lang}/learn` },
  { label: t.breadcrumb.blog, href: `/${lang}/learn/articles` },
  { label: entry.data.title },
];
---

<BaseLayout title={entry.data.title}>
  <Breadcrumb items={breadcrumbItems} client:load />
  <Hero
    variant="small"
    subtitle={t.subtitle}
    title={entry.data.title}
    description={entry.data.description}
  />

  <div class="mx-auto">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 py-12">
      <article class="lg:col-span-8 lg:col-start-1">
        <Article>
          <Content />
        </Article>

        {/* Author Bio */}
        {authorData && (
          <div class="mt-16 p-6 bg-muted rounded-lg">
            <div class="flex items-start gap-4">
              {authorData.data.profileImage && (
                <img
                  src={authorData.data.profileImage}
                  alt={authorData.data.name}
                  class="w-16 h-16 rounded-full object-cover"
                />
              )}
              <div>
                <h3 class="font-semibold">{authorData.data.name}</h3>
                <p class="text-sm text-muted-foreground">{authorData.data.role}</p>
                {authorData.data.bio && <p class="mt-2">{authorData.data.bio}</p>}
              </div>
            </div>
          </div>
        )}
      </article>
    </div>

    {/* Related Articles */}
    {relatedArticles.length > 0 && (
      <section class="border-t py-16">
        <div class="max-w-[900px] mx-auto mb-8">
          <h2 class="text-3xl font-bold">{t.relatedArticles}</h2>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          {relatedArticles.map((article) => (
            <Card>
              <CardHeader>
                {article.data.coverImage && (
                  <div class="relative w-full aspect-video mb-4 overflow-hidden rounded-lg">
                    <img
                      src={article.data.coverImage}
                      alt={article.data.title}
                      class="object-cover w-full h-full transition-transform hover:scale-105 duration-300"
                      loading="lazy"
                    />
                  </div>
                )}
                <CardTitle class="line-clamp-2">{article.data.title}</CardTitle>
              </CardHeader>
              <CardContent>
                <p class="text-sm text-muted-foreground mb-4 line-clamp-2">
                  {article.data.description}
                </p>
                
                  href={`/${lang}/learn/articles/${article.id.split('/').pop()}`}
                  class="text-primary hover:underline inline-flex items-center gap-1"
                >
                  {t.readArticle}
                  <ArrowRight className="h-4 w-4" />
                </a>
              </CardContent>
            </Card>
          ))}
        </div>
      </section>
    )}
  </div>
</BaseLayout>