---
// src/pages/[lang]/learn/articles/[id].astro
import { getCollection, getEntry, render } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { Badge } from '@/components/ui/badge';
import { Card } from '@/components/ui/card';
import { ArrowLeft, ArrowRight } from 'lucide-react';
import Breadcrumb from '@/components/Breadcrumb';
import Article from '@/components/Article.astro';
import { languages } from '@/i18n/config';
import { articleTranslations } from '@/i18n/translations/articles';
import ArticleAuthorCard from '@/components/ArticleAuthorCard.astro';
import TableOfContents from '@/components/TableOfContents';
import RelatedArticleCard from '@/components/RelatedArticleCard.astro';
import LanguageNotice from '@/components/LanguageNotice.astro';

interface Props {
  entry: CollectionEntry<'articles'>;
  authorData: CollectionEntry<'team'>;
  relatedArticles: CollectionEntry<'articles'>[];
}

export async function getStaticPaths() {
  const allArticles = await getCollection('articles');
  const allTeamMembers = await getCollection('team');

  console.log(
    'Debug: Team members found:',
    allTeamMembers.map((t) => t.id)
  );

  const paths = await Promise.all(
    Object.keys(languages).flatMap(async (lang) => {
      const languageArticles = allArticles.filter((article) => article.id.startsWith(`${lang}/`));

      return Promise.all(
        languageArticles.map(async (entry) => {
          // Log the article data for debugging
          console.log('Processing article:', {
            id: entry.id,
            authorRef: entry.data.author, // Let's see what this actually is
          });

          // Get author data - assuming author is a string ID
          const authorId =
            typeof entry.data.author === 'string'
              ? entry.data.author
              : entry.data.author.id || entry.data.author.slug;

          const authorData = await getEntry('team', authorId);
          console.log('Author lookup result:', {
            lookupId: authorId,
            found: !!authorData,
          });

          return {
            params: {
              lang,
              id: entry.id
                .split('/')
                .pop()
                ?.replace(/\.mdx?$/, ''),
            },
            props: {
              entry,
              authorData,
              relatedArticles: [],
            },
          };
        })
      );
    })
  );

  return paths.flat();
}
const { entry, authorData, relatedArticles } = Astro.props;
const { lang } = Astro.params;
const t = articleTranslations[lang];
const { Content } = await render(entry);

// Format date
const formattedDate = entry.data.publishDate.toLocaleDateString(lang, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const breadcrumbItems = [
  { label: t.breadcrumb.learn, href: `/${lang}/learn` },
  { label: t.breadcrumb.blog, href: `/${lang}/learn/articles` },
  { label: entry.data.title },
];
---

<BaseLayout title={entry.data.title}>
  <Breadcrumb items={breadcrumbItems} client:load />

  {/* Article Header */}
  <header class="py-12 lg:py-20">
    <div class="container max-w-4xl">
      <div class="flex flex-col gap-4">
        {
          lang === 'nl' && entry.data.originalLang === 'en' && (
            <LanguageNotice originalLang={entry.data.originalLang} />
          )
        }

        {/* Tags */}
        <div class="flex flex-wrap gap-2">
          {entry.data.tags.map((tag) => <Badge variant="default">{tag}</Badge>)}
        </div>

        {/* Title and description */}
        <h1 class="text-4xl lg:text-5xl font-bold mb-4">{entry.data.title}</h1>
        <p class="text-xl text-muted-foreground mb-6">{entry.data.description}</p>

        {/* Article metadata */}
        <div class="flex items-center gap-4 text-sm text-muted-foreground">
          <time datetime={entry.data.publishDate.toISOString()}>
            {formattedDate}
          </time>
          <span>â€¢</span>
          <span>{entry.data.readingTime} min read</span>
        </div>
      </div>

      {/* Cover image */}
      {
        entry.data.coverImage && (
          <div class="mt-8 aspect-video rounded-lg overflow-hidden">
            <img
              src={entry.data.coverImage}
              alt={entry.data.title}
              class="w-full h-full object-cover"
            />
          </div>
        )
      }

      <div class="mt-8">
        {
          authorData && (
            <ArticleAuthorCard
              name={authorData.data.name}
              role={authorData.data.role}
              bio={authorData.data.bio}
              profileImage={authorData.data.profileImage}
              socialLinks={authorData.data.socialLinks}
              slug={authorData.id.split('/').pop()}
              lang={lang}
            />
          )
        }
      </div>
    </div>
  </header>

  <div class="container max-w-4xl">
    {/* Main content */}
    <main class="lg:col-span-8">
      <Article>
        <Content />
      </Article>

      {/* Author bio */}
    </main>

    {/* Related articles */}
    {
      relatedArticles?.length > 0 && (
        <section class="mt-16 pt-16 border-t">
          <h2 class="text-2xl font-bold mb-8">More articles you might like</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            {relatedArticles.map((article) => (
              <RelatedArticleCard article={article} lang={lang} />
            ))}
          </div>
        </section>
      )
    }
  </div>
</BaseLayout>
