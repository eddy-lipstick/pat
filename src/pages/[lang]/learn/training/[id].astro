---
// src/pages/[lang]/training/[id].astro
import { getCollection, getEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  CalendarDays,
  Clock,
  Users,
  GraduationCap,
  MapPin,
  Languages,
  CheckCircle2,
} from 'lucide-react';
import { render } from 'astro:content';
import Breadcrumb from '@/components/Breadcrumb';
import { languages } from '@/i18n/config';
import { trainingTranslations } from '@/i18n/translations/training';

export async function getStaticPaths() {
  const trainings = await getCollection('training');

  return Promise.all(
    Object.keys(languages).flatMap(async (lang) => {
      const languageTrainings = trainings.filter((training) => training.id.startsWith(lang + '/'));

      return Promise.all(
        languageTrainings.map(async (training) => {
          // Resolve trainer references
          // In getStaticPaths
          const resolvedTrainers = await Promise.all(
            (training.data.trainers || []).map(async (trainer) => {
              try {
                // If trainer is a string, use it directly as the ID
                const trainerId = typeof trainer === 'string' ? trainer : trainer.id;

                return await getEntry('team', trainerId);
              } catch (error) {
                console.error(`Error resolving trainer:`, error);
                return null;
              }
            })
          );

          const validTrainers = resolvedTrainers.filter((trainer) => trainer !== null);
          const id = training.id.split('/').pop()?.replace('.md', '');

          return {
            params: {
              lang,
              id,
            },
            props: {
              training: {
                ...training,
                data: {
                  ...training.data,
                  trainers: validTrainers,
                },
              },
            },
          };
        })
      );
    })
  ).then((results) => results.flat());
}

const { training } = Astro.props;
const { lang } = Astro.params;
const t = trainingTranslations[lang];
const { Content } = await render(training);

const {
  title,
  description,
  publishDate,
  duration,
  level,
  maxParticipants,
  language,
  location,
  price,
  learningObjectives,
  modules,
  trainers,
  prerequisites,
  includes,
  testimonials,
  coverImage,
  gallery,
  tags,
  upcomingDates,
} = training.data;

const formattedDate = new Date(publishDate).toLocaleDateString(lang, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const levelColors = {
  beginner: 'bg-success/20 text-success',
  intermediate: 'bg-warning/20 text-warning',
  advanced: 'bg-destructive/20 text-destructive',
};

const breadcrumbItems = [
  { label: t.breadcrumb.learn, href: `/${lang}/learn` },
  { label: t.breadcrumb.offerings, href: `/${lang}/learn/training` },
  { label: title },
];
---

<BaseLayout title={title}>
  <div class="flex flex-col gap-8">
    <Breadcrumb items={breadcrumbItems} client:load />

    {/* Hero Section */}
    <!-- Keep the existing hero section code -->

    {/* Main Content */}
    <div class="container mx-auto px-4">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Content Column */}
        <div class="lg:col-span-2 flex flex-col gap-8">
          {/* Description Card */}
          <Card>
            <CardHeader>
              <CardTitle>{t.aboutTraining}</CardTitle>
            </CardHeader>
            <CardContent class="prose prose-lg dark:prose-invert">
              <p>{description}</p>

              <div class="flex flex-col gap-4">
                <h3 class="text-xl font-semibold">{t.learningObjectives}</h3>
                <ul class="flex flex-col gap-2">
                  {
                    learningObjectives.map((objective) => (
                      <li class="flex items-start gap-2">
                        <CheckCircle2 className="w-5 h-5 text-primary mt-1 flex-shrink-0" />
                        <span>{objective}</span>
                      </li>
                    ))
                  }
                </ul>
              </div>
            </CardContent>
          </Card>

          {/* Modules */}
          <Card>
            <CardHeader>
              <CardTitle>{t.program}</CardTitle>
            </CardHeader>
            <!-- Keep existing modules content -->
          </Card>

          {/* Training Content */}
          <Card>
            <CardHeader>
              <CardTitle>{t.description}</CardTitle>
            </CardHeader>
            <CardContent>
              <div class="prose prose-lg max-w-none text-foreground">
                <Content />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div class="flex flex-col gap-6">
          {/* Training Info Card */}
          <Card>
            <CardHeader>
              <CardTitle>{t.info}</CardTitle>
            </CardHeader>
            <CardContent class="flex flex-col gap-4">
              <!-- Keep existing info content but update language-specific text -->
              {
                maxParticipants && (
                  <div class="flex items-center gap-2 text-sm">
                    <Users className="w-4 h-4" />
                    <span>{t.maxParticipants.replace('{count}', maxParticipants)}</span>
                  </div>
                )
              }

              <div class="flex items-center gap-2 text-sm">
                <Languages className="w-4 h-4" />
                <span>{t.languages[language]}</span>
              </div>
              <!-- Other info items -->
            </CardContent>
          </Card>
          {/* Trainers Card */}
          {
            trainers && trainers.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>{t.trainers}</CardTitle>
                </CardHeader>
                <CardContent>
                  <div class="flex flex-col gap-6">
                    {trainers.map((trainer) => {
                      // Add debug logging
                      console.log('Rendering trainer:', trainer);

                      if (!trainer?.data) {
                        console.warn('Trainer data is missing:', trainer);
                        return null;
                      }

                      return (
                        <div class="flex items-start gap-4">
                          {/* Profile Image */}
                          <div class="flex-shrink-0">
                            {trainer.data.profileImage ? (
                              <img
                                src={trainer.data.profileImage}
                                alt={trainer.data.name}
                                class="w-16 h-16 rounded-full object-cover"
                              />
                            ) : (
                              <div class="w-16 h-16 rounded-full bg-muted flex items-center justify-center">
                                <span class="text-xl font-medium text-muted-foreground">
                                  {trainer.data.name?.charAt(0) || '?'}
                                </span>
                              </div>
                            )}
                          </div>

                          {/* Trainer Info */}
                          <div class="flex flex-col gap-1">
                            <h4 class="font-semibold text-foreground">
                              {trainer.data.name || 'Unknown Trainer'}
                            </h4>
                            {trainer.data.role && (
                              <p class="text-sm text-muted-foreground">{trainer.data.role}</p>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </CardContent>
              </Card>
            )
          }
          {/* Contact Card */}
          <Card>
            <CardHeader>
              <CardTitle>{t.interest}</CardTitle>
            </CardHeader>
            <CardContent class="flex flex-col gap-4">
              <p class="text-sm text-muted-foreground">
                {t.contactText}
              </p>

              <a
                href={`/${lang}/contact`}
                class="inline-flex items-center justify-center w-full px-4 py-2
                text-sm font-medium text-white bg-primary hover:bg-primary/90 rounded-md"
              >
                {t.contactButton}
              </a>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>
