---
// src/pages/[lang]/case-studies/index.astro
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import LargeCaseStudyGrid from '@/components/LargeCaseStudyGrid';
import Hero from '@/components/Hero.astro';
import { caseStudiesTranslations } from '@/i18n/translations/case-studies';
import type { ComponentProps } from 'astro/types'; // Import ComponentProps for typing

// Define type for translations based on the import
type CaseStudyTranslations = (typeof caseStudiesTranslations)['en']; // Use 'en' or 'nl' as base

// Generate static paths for each language
export function getStaticPaths() {
  return [{ params: { lang: 'en' } }, { params: { lang: 'nl' } }];
}

const { lang } = Astro.params;
const t = caseStudiesTranslations[
  lang as keyof typeof caseStudiesTranslations
] as CaseStudyTranslations; // Add type assertion

// Get all case studies for current language
const allCaseStudies = await getCollection('case-studies', (entry) =>
  entry.id.startsWith(lang + '/')
);

// Define type for monthMap keys
type MonthMap = Record<string, number>;

// Helper function to standardize dates for sorting
function getDateForSorting(dateStr: string): Date {
  // Add type for dateStr and return type
  // Maps for both English and Dutch month names
  const monthMap: MonthMap = {
    // Add type for monthMap
    // English months
    january: 1,
    jan: 1,
    february: 2,
    feb: 2,
    march: 3,
    mar: 3,
    april: 4,
    apr: 4,
    may: 5,
    june: 6,
    jun: 6,
    july: 7,
    jul: 7,
    august: 8,
    aug: 8,
    september: 9,
    sep: 9,
    sept: 9,
    october: 10,
    oct: 10,
    november: 11,
    nov: 11,
    december: 12,
    dec: 12,

    // Dutch months
    januari: 1,
    februari: 2,
    maart: 3,
    // april: 4, // Duplicate removed
    mei: 5,
    // juni: 6, // Duplicate removed
    juli: 7,
    augustus: 8,
    // september: 9, // Duplicate removed
    oktober: 10,
    // november: 11, // Duplicate removed
    // december: 12, // Duplicate removed
  };

  // Handle YYYY-YYYY format (use end year for sorting)
  const rangeMatch = dateStr.match(/^(\d{4})-(\d{4})$/);
  if (rangeMatch) {
    const endYear = parseInt(rangeMatch[2], 10);
    if (!isNaN(endYear)) {
      // Use December 1st of the end year for sorting
      return new Date(`${endYear}-12-01T00:00:00Z`);
    } else {
      console.warn(`Invalid year range format: ${dateStr}`);
      return new Date(0); // Fallback for invalid range
    }
  }

  // Handle "Month Year" format
  const parts = dateStr.split(' ');
  if (parts.length === 2) {
    const monthName = parts[0].toLowerCase();
    const year = parseInt(parts[1], 10);
    const month = monthMap[monthName]; // Access is now typed

    if (month && !isNaN(year)) {
      // Create a standardized date string (YYYY-MM-01)
      const monthStr = month.toString().padStart(2, '0');
      return new Date(`${year}-${monthStr}-01T00:00:00Z`);
    }
  }

  // Fallback for any other unexpected format
  console.warn(`Unhandled date format: ${dateStr}`);
  return new Date(0);
}

// Sort case studies by date (newest first)
const sortedCaseStudies = [...allCaseStudies].sort((a, b) => {
  const dateA = getDateForSorting(a.data.metadata.date);
  const dateB = getDateForSorting(b.data.metadata.date);
  return dateB.getTime() - dateA.getTime();
});

// Uncomment for debugging
// console.log("Sorted case studies:");
// sortedCaseStudies.forEach((study, index) => {
//   console.log(`${index + 1}. ${study.id} - ${study.data.metadata.date} -> ${getDateForSorting(study.data.metadata.date)}`);
// });

// Get unique services for filtering
const allServices = [
  ...new Set(allCaseStudies.flatMap((study) => study.data.metadata.relatedSkills)),
].sort();

// Get unique tags for filtering
const allTags = [...new Set(allCaseStudies.flatMap((study) => study.data.tags || []))].sort();
---

<BaseLayout title={t.meta.title} description={t.meta.description}>
  <!-- Hero Section -->
  <Hero class="min-h-[60vh]" subtitle={t.hero.subtitle} title={t.hero.title} />
  {/* Removed description prop as it doesn't exist on t.hero */}

  <div class="container mx-auto px-4 py-12">
    <LargeCaseStudyGrid studies={sortedCaseStudies} client:load lang={lang} />
  </div>
</BaseLayout>
