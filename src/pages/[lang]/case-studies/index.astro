---
// src/pages/[lang]/case-studies/index.astro
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import LargeCaseStudyGrid from '@/components/LargeCaseStudyGrid';
import Hero from '@/components/Hero.astro';
import { caseStudiesTranslations } from '@/i18n/translations/case-studies';

// Generate static paths for each language
export function getStaticPaths() {
  return [{ params: { lang: 'en' } }, { params: { lang: 'nl' } }];
}

const { lang } = Astro.params;
const t = caseStudiesTranslations[lang];

// Get all case studies for current language
const allCaseStudies = await getCollection('case-studies', (entry) =>
  entry.id.startsWith(lang + '/')
);

// Helper function to standardize dates for sorting
function getDateForSorting(dateStr) {
  // Maps for both English and Dutch month names
  const monthMap = {
    // English months
    january: 1,
    jan: 1,
    february: 2,
    feb: 2,
    march: 3,
    mar: 3,
    april: 4,
    apr: 4,
    may: 5,
    june: 6,
    jun: 6,
    july: 7,
    jul: 7,
    august: 8,
    aug: 8,
    september: 9,
    sep: 9,
    sept: 9,
    october: 10,
    oct: 10,
    november: 11,
    nov: 11,
    december: 12,
    dec: 12,

    // Dutch months
    januari: 1,
    februari: 2,
    maart: 3,
    april: 4,
    mei: 5,
    juni: 6,
    juli: 7,
    augustus: 8,
    september: 9,
    oktober: 10,
    november: 11,
    december: 12,
  };

  // Split the date into parts and standardize
  const parts = dateStr.split(' ');
  if (parts.length !== 2) {
    console.warn(`Date format issue with: ${dateStr}`);
    return new Date(0); // Return earliest possible date for invalid formats
  }

  const monthName = parts[0].toLowerCase();
  const year = parseInt(parts[1], 10);
  const month = monthMap[monthName];

  if (!month || isNaN(year)) {
    console.warn(`Invalid date: ${dateStr} (month: ${monthName}, year: ${year})`);
    return new Date(0);
  }

  // Create a standardized date string (YYYY-MM-01)
  // Use two digits for month (padding with 0 if needed)
  const monthStr = month.toString().padStart(2, '0');
  return new Date(`${year}-${monthStr}-01T00:00:00Z`);
}

// Sort case studies by date (newest first)
const sortedCaseStudies = [...allCaseStudies].sort((a, b) => {
  const dateA = getDateForSorting(a.data.metadata.date);
  const dateB = getDateForSorting(b.data.metadata.date);
  return dateB.getTime() - dateA.getTime();
});

// Uncomment for debugging
// console.log("Sorted case studies:");
// sortedCaseStudies.forEach((study, index) => {
//   console.log(`${index + 1}. ${study.id} - ${study.data.metadata.date} -> ${getDateForSorting(study.data.metadata.date)}`);
// });

// Get unique services for filtering
const allServices = [
  ...new Set(allCaseStudies.flatMap((study) => study.data.metadata.relatedSkills)),
].sort();

// Get unique tags for filtering
const allTags = [...new Set(allCaseStudies.flatMap((study) => study.data.tags || []))].sort();
---

<BaseLayout title={t.meta.title} description={t.meta.description}>
  <!-- Hero Section -->
  <Hero class="min-h-[60vh]" subtitle={t.hero.subtitle} title={t.hero.title} />

  <div class="container mx-auto px-4 py-12">
    <LargeCaseStudyGrid studies={sortedCaseStudies} client:load lang={lang} />
  </div>
</BaseLayout>
