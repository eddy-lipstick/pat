---
// src/pages/[lang]/tools/[slug].astro
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getCollection, render } from 'astro:content';
import { getLangFromUrl } from '@/i18n/utils';
import { languages } from '@/i18n/config'; // Import languages config
import { toolsTranslations } from '@/i18n/translations/tools';
import TagBadge from '@/components/TagBadge.astro'; // Import TagBadge
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowRight, ExternalLink, Check, Building, Calendar, Globe, ArrowDown, ChevronRight } from 'lucide-react';
import CaseQuote from '@/components/CaseQuote';
import ImageLightbox from '@/components/ImageLightbox';
import VideoPlayer from '@/components/VideoPlayer';
import Container from '@/components/Container.astro';

// Define Language type from config keys
type Language = keyof typeof languages;

export async function getStaticPaths() {
  // Get all tools products
  const allProducts = await getCollection('tools');

  const paths = [];

  // Generate paths for each language and product
  for (const lang of ['en', 'nl']) {
    // Filter products for current language
    const languageProducts = allProducts.filter((entry) => entry.id.startsWith(`${lang}/`));

    // Log for debugging
    console.log(`Found ${languageProducts.length} digital products for ${lang}`);
    console.log(
      'Product IDs:',
      languageProducts.map((product) => product.id)
    );

    for (const entry of languageProducts) {
      // Get the slug without the language prefix and extension
      const slug = entry.id.split('/')[1].replace(/\.mdx?$/, '');

      paths.push({
        params: { lang, slug },
        props: { entry },
      });
    }
  }

  return paths;
}

const { entry } = Astro.props;
const { Content } = await render(entry);

// Get current language
const currentLang = getLangFromUrl(Astro.url);
// Assert currentLang is a valid key for translations
const t = toolsTranslations[currentLang as Language];

// Extract data from entry
const {
  title,
  introduction,
  metadata,
  productUrl,
  logoImage,
  demoVideo,
  coverImage,
  targetAudience,
  keyFeatures,
  originStory,
  productOwnerQuote,
  images,
  relatedProducts,
  tags
} = entry.data;

// Fetch related products if any
let relatedProductsData = [];
if (relatedProducts && relatedProducts.length > 0) {
  try {
    const allProducts = await getCollection('tools', (product) => {
      return product.id.startsWith(currentLang + '/');
    });

    // Filter to only include the related products
    relatedProductsData = allProducts.filter((product) => {
      const productId = product.id.split('/')[1].replace(/\.mdx?$/, '');
      return relatedProducts.includes(productId) && product.id !== entry.id;
    });
  } catch (error) {
    console.error('Error fetching related products:', error);
  }
}

// Function to extract slug
function getSlug(path: string) {
  return path.split('/')[1].replace(/\.mdx?$/, '');
}
---

<BaseLayout title={`${title} | ${t.meta.seoTitle}`}>
  <!-- Hero Section - Modern, inspired by The Verge -->
  <div class="relative overflow-hidden">



 
      <div class="relative z-10">
        <!-- Breadcrumb -->
        <div class="text-text-secondary flex items-center gap-2 text-sm mb-8">
          <a href={`/${currentLang}`} class="hover:text-primary transition-colors">{t.breadcrumbs.home}</a>
          <ChevronRight className="w-3 h-3" />
          <a href={`/${currentLang}/tools`} class="hover:text-primary transition-colors">{t.breadcrumbs.tools}</a>
          <ChevronRight className="w-3 h-3" />
          <span class="text-text-primary">{title}</span>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-12 gap-12 items-center">
          <!-- Left column: Product info -->
          <div class="lg:col-span-5 flex flex-col gap-8">
      
            <div>
              {tags && tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-4">
                  {tags.map((tag: string) => ( // Use TagBadge component
                    <TagBadge tag={tag} lang={currentLang} />
                  ))}
                </div>
              )}

              <h1 class="text-5xl md:text-6xl font-bold tracking-tight text-foreground mb-6 font-roc-wide leading-tight">
                {title}
              </h1>

              <p class="text-xl md:text-2xl text-text-secondary leading-relaxed mb-8 max-w-3xl">
                {introduction}
              </p>
            </div>

            <!-- Metadata Section - Modernized -->
            {metadata && (
              <div class="flex flex-wrap gap-y-4 gap-x-6 text-sm border border-border/30 rounded-lg p-4 bg-surface-1/50 backdrop-blur-sm">
                {metadata.client && (
                  <div class="flex items-center gap-2 text-text-secondary">
                    <Building className="w-4 h-4 text-primary" />
                    <span class="text-text-tertiary">{t.metadata.client}:</span>
                    <span class="font-medium">{metadata.client}</span>
                  </div>
                )}
                {metadata.date && (
                  <div class="flex items-center gap-2 text-text-secondary">
                    <Calendar className="w-4 h-4 text-primary" />
                    <span class="text-text-tertiary">{t.metadata.date}:</span>
                    <span class="font-medium">{metadata.date}</span>
                  </div>
                )}
                {metadata.website && (
                  <div class="flex items-center gap-2 text-text-secondary">
                    <Globe className="w-4 h-4 text-primary" />
                    <a
                      href={metadata.website}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="font-medium hover:text-primary transition-colors"
                    >
                      {new URL(metadata.website).hostname}
                    </a>
                  </div>
                )}
              </div>
            )}

          </div>

          <!-- Right column: Product image/video (stylized) -->
          <div class="lg:col-span-7 relative">
            <!-- Decorative elements -->
            <div class="absolute -inset-0.5 bg-gradient-to-r from-primary/20 to-accent/20 rounded-xl blur-xl opacity-70"></div>
            
            <div class="relative rounded-lg overflow-hidden border border-border/20 shadow-2xl">
              {demoVideo ? (
                <VideoPlayer
                  client:only="react"
                  src={demoVideo}
                  poster={coverImage || ''}
                  title={title}
                />
              ) : coverImage ? (
                <img 
                  src={coverImage} 
                  alt={title} 
                  class="w-full h-auto object-cover rounded-lg" 
                  loading="eager"
                />
              ) : (
                <div class="bg-surface-1 w-full aspect-video flex items-center justify-center rounded-lg">
                  <span class="text-text-secondary">Product image</span>
                </div>
              )}
            </div>
          </div>
        </div>

        <!-- Scroll indicator - The Verge style -->
  
      </div>

  </div>

  <div id="overview" class="bg-background">

     <!-- Origin Story Section - Magazine style layout -->
     {originStory && (
      <section class="py-16 lg:py-24 border-b border-border/20">
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-16">
          <div class="lg:col-span-7">
          
            
            <div class="prose prose-xl prose-invert max-w-none">
              <p class="text-xl leading-relaxed text-text-secondary whitespace-pre-line">
                {originStory}
              </p>
            </div>
          </div>

          {productOwnerQuote && (
            <div class="lg:col-span-5 lg:sticky lg:top-24 self-start">
              <div class="relative">
                <!-- Decorative elements -->
                
                <div class="relative bg-surface-1 p-8 rounded-xl border border-border/30">
                  <CaseQuote
                    client:load
                    quote={productOwnerQuote.quote}
                    author={productOwnerQuote.author}
                    role={productOwnerQuote.role}
                  />
                </div>
              </div>
            </div>
          )}
        </div>
      </section>
    )}

      <!-- Target Audience Section - Modern card-based design -->
      {targetAudience && targetAudience.length > 0 && (
        <section class="py-16 lg:py-24 border-b border-border/20">
          <h2 class="text-3xl font-bold mb-12 text-foreground font-roc-wide">{t.sections.audience}</h2>

          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {targetAudience.map((audience: string, index: number) => (
              <div class="bg-gradient-to-br from-surface-1 to-surface-2 rounded-xl p-6 border border-border/20 flex items-start gap-4 hover:shadow-lg hover:border-primary/30 transition-all duration-300 group">
                <div class="flex shrink-0 items-center justify-center w-10 h-10 rounded-full bg-primary/10 text-primary group-hover:bg-primary group-hover:text-white transition-colors duration-300">
                  <Check className="w-5 h-5" />
                </div>
                <p class="text-lg">{audience}</p>
              </div>
            ))}
          </div>
        </section>
      )}
   <!-- Screenshots/Images - Modern carousel/gallery style -->
   {images && images.length > 0 && (
    <section class="py-16 lg:py-24 border-b border-border/20">

      <!-- Special handling for 2 or 4 images to create a grid -->
      {images.length === 2 || images.length === 4 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          {images.map((image: { src: string; alt: string; header?: string }, index: number) => (
            <div class="relative group">
              <!-- Decorative elements -->
              <div class="absolute -inset-0.5 bg-gradient-to-r from-primary/0 to-primary/10 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              
              <div class="relative rounded-lg overflow-hidden border border-border/20">
                {image.header && <h3 class="text-lg font-semibold mb-4 pt-4">{image.header}</h3>}
                <ImageLightbox
                  client:load
                  src={image.src}
                  alt={image.alt}
                  title={image.alt}
                  className="w-full"
                />
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div class="space-y-12">
          {images.map((image: { src: string; alt: string; header?: string }, index: number) => (
            <div class="relative group">
              <!-- Decorative elements -->
              <div class="absolute -inset-0.5 bg-gradient-to-r from-primary/0 to-primary/10 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              
              <div class="relative rounded-lg overflow-hidden border border-border/20">
                {image.header && <h3 class="text-lg mb-4 pt-4">{image.header}</h3>}
                <ImageLightbox
                  client:load
                  src={image.src}
                  alt={image.alt}
                  title={image.alt}
                  className="w-full"
                />
              </div>
            </div>
          ))}
        </div>
      )}
    </section>
  )}


      <!-- Key Features Section - Upgraded cards with hover effects -->
      {keyFeatures && keyFeatures.length > 0 && (
        <section class="py-16 lg:py-24 border-b border-border/20">

          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8 gap-y-12">
            {keyFeatures.map((feature: { title: string; description: string; icon?: string }, index: number) => (
              <div class="group">
                <Card className="relative h-full border-border/30 bg-surface-1/80 backdrop-blur-sm hover:bg-surface-2 transition-all duration-300 overflow-hidden">
                  <div class="absolute -top-6 -right-6 w-12 h-12 bg-primary opacity-0 rounded-full blur-xl group-hover:opacity-20 transition-opacity duration-500"></div>
                  <CardHeader className="pb-3">
                    {feature.icon && (
                      <div class="flex items-center justify-center w-12 h-12 rounded-lg bg-primary/10 mb-4 text-primary">
                        <span class="text-2xl" aria-hidden="true">
                          {feature.icon === 'timeline' && '⏱️'}
                          {feature.icon === 'analysis' && '📊'}
                          {feature.icon === 'route' && '🧭'}
                          {feature.icon === 'collection' && '📚'}
                          {feature.icon === 'presentation' && '🎭'}
                          {!['timeline', 'analysis', 'route', 'collection', 'presentation'].includes(feature.icon) && '🔧'}
                        </span>
                      </div>
                    )}
                    <CardTitle>{feature.title}</CardTitle> {/* Remove className */}
                  </CardHeader>
                  <CardContent>
                    <p class="text-text-secondary leading-relaxed">{feature.description}</p> {/* Change className to class */}
                  </CardContent>
                </Card>
              </div>
            ))}
          </div>
        </section>
      )}

 



   

     
  
  </div>
</BaseLayout>
