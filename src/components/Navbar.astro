---
// src/components/Navbar.astro
import { Menu, X, ChevronDown, Globe } from 'lucide-react';
import { getLangFromUrl } from '@/i18n/utils';
import { getNavItems } from '@/i18n/translations/navbar';

const { variant = 'dark' } = Astro.props;
const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;

// Get navigation items for current language
const navItems = getNavItems(currentLang, currentPath);

const variantClasses = {
  light: {
    nav: 'bg-white/95 backdrop-blur-sm',
    text: 'text-background',
    hover: 'hover:text-feitlijn-purple-700',
    active: 'text-feitlijn-purple-700',
    mobileMenu: 'bg-white',
    mobileMenuHover: 'hover:bg-feitlijn-purple-50',
    dropdown: 'bg-white',
    dropdownHover: 'hover:bg-feitlijn-purple-50',
    button: 'hover:bg-feitlijn-purple-50',
    shadow: 'shadow-lg shadow-gray-200/50',
  },
  dark: {
    nav: 'bg-surface-1/95 backdrop-blur-sm',
    text: 'text-text-1',
    hover: 'hover:text-feitlijn-purple-400',
    active: 'text-feitlijn-purple-400',
    mobileMenu: 'bg-surface-1',
    mobileMenuHover: 'hover:bg-surface-2',
    dropdown: 'bg-surface-1',
    dropdownHover: 'hover:bg-surface-2',
    button: 'hover:bg-surface-2',
    shadow: 'shadow-lg shadow-black/20',
  },
};

const classes = variantClasses[variant];
---

<nav
  class:list={['fixed w-full z-50 transition-all duration-300 py-4', classes.nav]}
  id="navbar"
  aria-label="Main navigation"
  data-variant={variant}
>
  <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
    <div class="flex justify-between items-center">
      <div class="flex-shrink-0">
        <a
          href={`/${currentLang}`}
          class:list={[
            'text-2xl transition-colors flex items-center gap-2 font-roc-grotesk',
            classes.text,
            classes.hover,
          ]}
        >
          <img src="/logo.svg" alt="" class="h-6 w-auto" />
        </a>
      </div>

      <div class="hidden lg:flex items-center space-x-8">
        {
          navItems.map((item) =>
            item.children ? (
              <div class="relative group">
                <button
                  type="button"
                  class:list={[
                    'inline-flex items-center gap-1 px-3 py-2 text-base font-medium rounded-md transition-colors font-roc-grotesk',
                    classes.text,
                    classes.hover,
                    currentPath.startsWith(item.href) ? classes.active : '',
                  ]}
                >
                  {item.label}
                  <ChevronDown class="h-4 w-4 transition-transform group-hover:rotate-180" />
                </button>
                <div
                  class:list={[
                    'absolute left-0 z-10 mt-2 w-48 rounded-md overflow-hidden opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200',
                    classes.dropdown,
                    classes.shadow,
                  ]}
                >
                  <div class="py-1">
                    {item.children.map((child) => (
                      <a
                        href={child.href}
                        class:list={[
                          'block px-4 py-2 text-sm transition-colors',
                          classes.text,
                          classes.dropdownHover,
                          currentPath === child.href ? classes.active : '',
                        ]}
                      >
                        {child.label}
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class:list={[
                  'px-4 py-2 text-base font-medium rounded-md transition-colors font-roc-grotesk',
                  item.isCTA
                    ? variant === 'dark'
                      ? 'bg-feitlijn-purple-500 text-white hover:bg-feitlijn-purple-400'
                      : 'bg-feitlijn-purple-600 text-white hover:bg-feitlijn-purple-500'
                    : [classes.text, classes.hover],
                  currentPath === item.href && !item.isCTA ? classes.active : '',
                ]}
              >
                {item.label}
              </a>
            )
          )
        }
      </div>

      <!-- Mobile menu button -->
      <div class="lg:hidden">
        <button
          type="button"
          id="menuButton"
          class:list={[
            'inline-flex items-center justify-center p-2 rounded-md transition-colors',
            classes.text,
            classes.button,
          ]}
          aria-expanded="false"
        >
          <span class="menu-icon">
            <Menu class="h-6 w-6" />
          </span>
          <span class="close-icon hidden">
            <X class="h-6 w-6" />
          </span>
        </button>
      </div>
    </div>

    <!-- Mobile menu -->
    <div
      id="mobileMenu"
      class:list={['lg:hidden hidden mt-4', classes.mobileMenu, classes.shadow]}
      role="menu"
    >
      <div class="px-2 pt-2 pb-3 space-y-1">
        {
          navItems.map((item) =>
            item.children ? (
              <div class="space-y-1">
                <div
                  class:list={['px-3 py-2 text-base font-medium font-roc-grotesk', classes.text]}
                >
                  {item.label}
                </div>
                <div class="pl-4">
                  {item.children.map((child) => (
                    <a
                      href={child.href}
                      class:list={[
                        'block px-3 py-2 text-base font-medium rounded-md transition-colors',
                        classes.text,
                        classes.mobileMenuHover,
                        currentPath === child.href ? classes.active : '',
                      ]}
                    >
                      {child.label}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class:list={[
                  'block px-4 py-2 text-base font-medium rounded-md transition-colors',
                  item.isCTA
                    ? variant === 'dark'
                      ? 'bg-feitlijn-purple-500 text-white hover:bg-feitlijn-purple-400 mx-3 my-2 text-center'
                      : 'bg-feitlijn-purple-600 text-white hover:bg-feitlijn-purple-500 mx-3 my-2 text-center'
                    : [classes.text, classes.mobileMenuHover],
                  currentPath === item.href && !item.isCTA ? classes.active : '',
                ]}
              >
                {item.label}
              </a>
            )
          )
        }
      </div>
    </div>
  </div>
</nav>

<style>
  .group:hover .group-hover\:rotate-180 {
    transform: rotate(180deg);
  }

  .group:hover .group-hover\:opacity-100 {
    opacity: 1;
  }

  .group:hover .group-hover\:visible {
    visibility: visible;
  }

  .close-icon,
  .menu-icon {
    transition: all 0.3s ease;
  }
</style>

<script>
  const menuButton = document.getElementById('menuButton');
  const mobileMenu = document.getElementById('mobileMenu');
  const menuIcon = document.querySelector('.menu-icon');
  const closeIcon = document.querySelector('.close-icon');

  if (menuButton && mobileMenu && menuIcon && closeIcon) {
    menuButton.addEventListener('click', () => {
      const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';

      menuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      mobileMenu.classList.toggle('hidden');

      menuIcon.classList.toggle('hidden');
      closeIcon.classList.toggle('hidden');
    });
  }

  // Handle navbar visibility on scroll
  let lastScrollTop = 0;
  const navbar = document.getElementById('navbar');

  window.addEventListener('scroll', () => {
    if (!navbar) return;

    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

    if (scrollTop > lastScrollTop && scrollTop > 100) {
      navbar.style.transform = 'translateY(-100%)';
    } else {
      navbar.style.transform = 'translateY(0)';
    }

    lastScrollTop = scrollTop;
  });
</script>
