---
// src/layouts/ModernCaseStudyLayout.astro
import '../styles/globals.css';
import '../styles/fonts.css';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import CaseStudyHero from '../components/CaseStudyHero';
import CaseStudyMeta from '../components/CaseStudyMeta';
import VideoPlayer from '../components/VideoPlayer';
import ImageLightbox from '../components/ImageLightbox';
import ExpandableText from '../components/ExpandableText';
import CaseQuote from '../components/CaseQuote';
import BeforeAfterSlider from '../components/BeforeAfterSlider';
import TeamCTA from '../components/TeamCTA';
import CaseStudyTimeline from '../components/CaseStudyTimeline';
import SEO from '@/components/SEO.astro';
import Container from '../components/Container.astro';
import SectionHeader from '@/components/SectionHeader.astro';
import { getLangFromUrl } from '@/i18n/utils';
import { caseStudiesTranslations } from '@/i18n/translations/case-studies';

import { getEntry } from 'astro:content';

// Get current language and translations
const currentLang = getLangFromUrl(Astro.url);
const t = caseStudiesTranslations[currentLang];

// Get data from props
const { entry, ...props } = Astro.props;

// Use either entry.data or direct props
const {
  title,
  introduction,
  metadata,
  heroVideo,
  expandableContent,
  quotes,
  images,
  beforeAfter,
  teamMember,
  timeline,
} = entry?.data || props;

// Fetch the referenced team member if it exists
let teamMemberData;
if (teamMember) {
  try {
    const teamMemberId = typeof teamMember === 'object' ? teamMember.id : teamMember;
    const teamMemberEntry = await getEntry('team', teamMemberId);

    if (teamMemberEntry) {
      teamMemberData = {
        name: teamMemberEntry.data.name,
        role: teamMemberEntry.data.role,
        imageUrl: teamMemberEntry.data.profileImage,
      };
    }
  } catch (error) {
    console.error('Error fetching team member:', error);
  }
}

// Construct SEO metadata
const seoDescription = introduction?.slice(0, 155) + '...';

// Determine SEO image with fallbacks
const seoImage = entry?.id
  ? `/og/case-studies/${entry.id}.png`
  : images?.[0]?.src || heroVideo?.poster || '/default-og-image.jpg';

// Base URL for structured data
const baseUrl = import.meta.env.SITE || 'https://www.patroon.nl';

// Generate structured data for the case study
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: title,
  description: seoDescription,
  image: new URL(seoImage, baseUrl).toString(),
  datePublished: metadata?.date,
  inLanguage: currentLang,
  author: teamMemberData
    ? {
        '@type': 'Person',
        name: teamMemberData.name,
        jobTitle: teamMemberData.role,
      }
    : undefined,
  publisher: {
    '@type': 'Organization',
    name: 'Patroon Legal Design',
    logo: {
      '@type': 'ImageObject',
      url: new URL('/logo.png', baseUrl).toString(),
    },
  },
};

const breadcrumbsStructuredData = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: [
    {
      '@type': 'ListItem',
      position: 1,
      name: t.breadcrumbs.home,
      item: new URL(`/${currentLang}`, baseUrl).toString(),
    },
    {
      '@type': 'ListItem',
      position: 2,
      name: t.breadcrumbs.caseStudies,
      item: new URL(`/${currentLang}/case-studies`, baseUrl).toString(),
    },
    {
      '@type': 'ListItem',
      position: 3,
      name: title,
      item: Astro.url.href,
    },
  ],
};
---

<!doctype html>
<html lang={currentLang}>
  <head>
    <SEO
      title={`${title} | ${t.meta.seoTitle}`}
      description={seoDescription}
      image={seoImage}
      type="case-study"
      canonicalURL={Astro.url.href}
      lang={currentLang}
    />

    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    <script type="application/ld+json" set:html={JSON.stringify(breadcrumbsStructuredData)} />
  </head>
  <body class="min-h-screen bg-feitlijn-purple-50 text-background">
    <Navbar variant="light" />
    <main>
      <Container>
        <section class="relative min-h-screen">
          <!-- Hero Section -->
          <CaseStudyHero client:load title={title} introduction={introduction} />

          <!-- Metadata Section -->
          <CaseStudyMeta {...metadata} translations={t.metadata} lang={currentLang} />

          <!-- Hero Video -->
          {
            heroVideo && (
              <div class="mb-20">
                <VideoPlayer client:only="react" {...heroVideo} translations={t.video} />
              </div>
            )
          }

          <!-- Expandable Content Sections -->
          {
            expandableContent?.map((content) => (
              <div class="container mx-auto px-6 py-16">
                <ExpandableText client:load {...content} translations={t.expandable} />
              </div>
            ))
          }

          <!-- Images -->
          {
            (() => {
              const fullImages = images?.filter((img) => img.type === 'full') || [];
              const gridImages = images?.filter((img) => img.type === 'grid') || [];

              return (
                <>
                  {fullImages.map((image) => (
                    <div class="container mx-auto mb-32">
                      <ImageLightbox
                        client:load
                        src={image.src}
                        alt={image.alt}
                        className="aspect-video w-full"
                        translations={t.images}
                      />
                    </div>
                  ))}

                  {gridImages.length > 0 && (
                    <div class="container mx-auto px-6 mb-32">
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        {gridImages.map((image) => (
                          <ImageLightbox
                            client:load
                            src={image.src}
                            alt={image.alt}
                            className="aspect-video w-full"
                            translations={t.images}
                          />
                        ))}
                      </div>
                    </div>
                  )}
                </>
              );
            })()
          }

          <!-- First Quote -->
          {
            quotes?.first && (
              <div className="container mx-auto px-6 mb-16 md:mb-24 lg:mb-32">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
                  <div class="w-full">{/* Left content */}</div>
                  <div class="w-full">
                    <CaseQuote client:load {...quotes.first} translations={t.quotes} />
                  </div>
                </div>
              </div>
            )
          }

          <!-- Before/After Sliders -->
          {
            beforeAfter?.map((comparison) => (
              <BeforeAfterSlider client:only="react" {...comparison} translations={t.beforeAfter} />
            ))
          }

          <!-- Second Quote -->
          {
            quotes?.second && (
              <div className="container mx-auto px-6 mb-16 md:mb-24 lg:mb-32">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
                  <div class="w-full">
                    <CaseQuote client:load {...quotes.second} translations={t.quotes} />
                  </div>
                  <div class="w-full">{/* Right content */}</div>
                </div>
              </div>
            )
          }

          <SectionHeader
            eyebrow={t.section.eyebrow}
            title={t.section.title}
            description={t.section.description}
            variant="light"
          />

          <!-- Timeline Section -->
          {
            timeline && (
              <div class="text-white py-24">
                <CaseStudyTimeline
                  client:visible
                  entries={timeline.entries}
                  translations={t.timeline}
                />
              </div>
            )
          }

          {
            teamMemberData && (
              <section class="mt-32 mb-24">
                <TeamCTA client:visible teamMember={teamMemberData} />
              </section>
            )
          }
        </section>
      </Container>

      <Footer />
    </main>
  </body>
</html>
